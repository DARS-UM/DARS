mutate(topic = str_replace(topic, "_", " ")) %>%
select(-weight) %>%
spread(key = topic, value = weight_2, fill = 0)
d <- as.data.frame(d)
rownames(d) <- d %>% pull(time)
d3heatmap(d %>% select(-time), colors = "Blues")
student_TP %>% filter(`Student ID` == d_student) %>%
select(-`Student ID`) %>%
gather(key = topic, value = weight, -time) %>%
group_by(time) %>%
mutate(weight_2= weight/sum(weight)) %>%
ungroup() %>%
mutate(topic = str_replace(topic, "_", " ")) %>%
select(-weight) %>%
spread(key = topic, value = weight_2, fill = 0) %>%
arrange(desc(time))
d <- student_TP %>% filter(`Student ID` == d_student) %>%
select(-`Student ID`) %>%
gather(key = topic, value = weight, -time) %>%
group_by(time) %>%
mutate(weight_2= weight/sum(weight)) %>%
ungroup() %>%
mutate(topic = str_replace(topic, "_", " ")) %>%
select(-weight) %>%
spread(key = topic, value = weight_2, fill = 0) %>%
arrange(desc(time))
d <- as.data.frame(d)
rownames(d) <- d %>% pull(time)
d3heatmap(d %>% select(-time), colors = "Blues")
as.data.frame(d)
d %>% select(-time)
d3heatmap(d %>% select(-time), colors = "Blues")
d3heatmap(d %>% select(-time),Rowv = F, colors = "Blues")
d3heatmap(d %>% select(-time),Rowv = F, Colv = F, colors = "Blues")
d <- student_TP %>% filter(`Student ID` == d_student) %>%
select(-`Student ID`) %>%
gather(key = topic, value = weight, -time) %>%
group_by(time) %>%
mutate(weight_2= weight/sum(weight)) %>%
ungroup() %>%
mutate(topic = str_replace(topic, "_", " ")) %>%
select(-weight_2) %>%
spread(key = topic, value = weight, fill = 0) %>%
arrange(desc(time))
d <- as.data.frame(d)
rownames(d) <- d %>% pull(time)
d3heatmap(d %>% select(-time),Rowv = F, Colv = F, colors = "Blues")
lda_beta %>% filter(topic == "Topic 60")
lda_beta
lda_beta %>% filter(topic == 60)
lda_beta %>% filter(topic == 53)
lda_beta %>% filter(topic == 42)
lda_beta %>% filter(topic == 28)
lda_beta %>% filter(topic == 23)
lda_beta %>% filter(topic == 23)
lda_beta %>% filter(topic == 19)
lda_beta %>% filter(topic == 14)
lda_beta %>% filter(topic == 9)
lda_beta %>% filter(topic == 39)
lda_beta %>% filter(topic == 4)
lda_beta %>% filter(topic == 48)
library(plyr)
my_function <-  function(x){ x*2}
is.function(my_function)
is.primitive(my_function())
is.primitive(my_function)
is.primitive(sum)
?mget
objs <- mget(ls("package::base"), inherits = T)
objs <- mget(ls("package:base"), inherits = T)
funs <- Filter(is.function, objs)
funs
funs %>% map(formals)
funs %>% map(formals)
funs
funs %>% map(formals) %>% max()
p <- funs %>% map(formals)
p %>% map(length)
p %>% map(length) %>% max
p %>% map(length) %>% tibble
x <- 1
h <- function(){
y <- 2
i <- function(){
z <- 3
c(x,y,z)
}
i()
}
h()
k <- j(1)
j <- function(x){
y <- 2
function(){
c(x,y)
}
}
k <- j(1)
k()
exists("a")
!exists("a")
j <- function(){
if(!exists("a")){
a <- 1
} else {
a <- a+1
}
print(a)
}
j()
j()
j()
f <- function() x+1
codetools::findGlobals(f)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
`(` <- function(e1){
if(is.numeric(e1) && runif(1)<0.1){
e1+1
} else{
e1
}
}
(1)
(1
(1
(1
)
)
)
rm("(")
rm("(")
c <- 10
c(c=c)
rm(c)
f <- function(x){
f <- function(x){
f <- function(x){
x^2
}
f(x)+1
}
f(x)+2
}
f(10)
f <- function(x){
f <- function(x){
f <- function(x){
x^2
}
f(x)+1
}
f(x)*2
}
f(10)
rm(f)
args <- list(1:10, na.rm = T)
do.call(mean, args)
rm(args)
add <- function(x){
function(y) x+y
}
1:10
adders <- lapply(1:10, function(x) x+1)
adders
adders <- lapply(1:10, add)
adders
adders[[1]]
adders[[1]](10)
adders
adders[[2]](10)
adders[[1]](10)
adders[[2]](10)
adders[[10]](10)
y
x
rm(x)
adders[[10]](10)
x
adders[[1]](10)
add <- function(x){
function(y) x+y
}
adders <- lapply(1:10, add)
adders[[1]](10)
adders[[10]](10)
add <- function(x){
force(x)
function(y) x+y
}
adders[[10]](10)
adders[[1]](10)
f <- function(x = ls()){
a <- 1
x
}
f()
f(ls())
{1;2}
{2;2}
{2;2}
{2;2}
?{}
{1,3+4}
{1;3+4}
{y <- 1;2}
f1 <- function(x = {y <- 1; 2}, y = 0){
x+y
}
f1()
f2 <- function(x = z){
z <- 100
x
}
f2()
f1(y=3)
f1(y=5)
{y <- 1; 2}
f1 <- function(x = {y <- 1; 2}, y = 0){
x+y
print(x)
print(y)
}
f1(y=5)
f1(x= 5)
objs <- mget(ls("package:base"), inherits = T)
?Filter
is.function()
is.function
objs <- mget(ls("package:base"), inherits = T)
objs
funs <- Filter(is.function, objs)
funs
is.function
`xor<-` <- function(x, y, value){
ifelse((x && y) | !(x|y), F,T)
}
`%xor%` <- function(x, y){
ifelse((x && y) | !(x|y), F,T)
}
T %xor% F
T %xor% T
F %xor% F
F %xor% T
rm(`%xor%`)
`modify<-` <- function(x, value){
r <- sample(1:length(x))
x[r] <- value
}
`modify<-` <- function(x, value){
r <- sample(1:length(x), 1)
x[r] <- value
}
`modify<-`(x, 88)
x <- 1:10
`modify<-`(x, 88)
x
sample(1:length(x), 1)
sample(1:length(x), 1)
sample(1:length(x), 1)
sample(1:length(x), 1)
sample(1:length(x), 1)
sample(1:length(x), 1)
`modify<-` <- function(x, value){
r <- sample(1:length(x), 1)
x[r] <- value
}
`modify<-`(x, 88)
x
x
x <- 1:10
`modify<-`(x, 88)
`modify<-`(x) <- 88
modify(x) <- 88
x
`modify<-` <- function(x, value){
r <- sample(1:length(x), 1)
x[r] <- value
x
}
modify(x) <- 88
x
x <- 1:10
modify(x) <- 88
x
rm(`modify<-`, x)
?source()
library
?sink()
capture.output
iris
data("iris")
View(data)
str(iris)
irs_randomised <- iris[sample(nrow(iris)),]
irs_randomised
iris
nrow(iris_radomised)
nrow(irs_radomised)
nrow(irs_randomised)
0.7*nrow(irs_randomised
)
train_df <- iris_randomised[1:as.integer(0.7*nrow(irs_randomised))]
train_df <- iris_randomised[1:as.integer(0.7*nrow(irs_randomised)),]
train_df <- irs_randomised[1:as.integer(0.7*nrow(irs_randomised)),]
train_df
as.integer(0.7*nrow(irs_randomised)+1)
test_df  <-iris_randomised[as.integer(0.7*nrow(irs_randomised)+1),]
test_df  <-irs_randomised[as.integer(0.7*nrow(irs_randomised)+1),]
my_euclidean <- function(a, b){
d = 0
for(i in 1:length(a)){
d = d + (a[i]-b[i])^2
}
d <-  sqrt(d)
}
x
x <- c(1,0)
y <- c(-1,0)
my_euclidean(x, y)
my_euclidean <- function(a, b){
d = 0
for(i in 1:length(a)){
d = d + (a[i]-b[i])^2
}
sqrt(d)
}
my_euclidean(x, y)
y <- c(0,0)
my_euclidean(x, y)
y <- c(0,1)
my_euclidean(x, y)
rm(x,y)
instance <- test_df[1]
instance
instance <- test_df[[1]]
instance
instance <- test_df[1,]
instance
train_df %>% mutate(distance = pmap(list(c(Sepal.Length,Sepal.Width, Petal.Length, Petal.Width),instance), my_euclidean)
)
train_df %>% mutate(vector = c(Sepal.Length,Sepal.Width, Petal.Length, Petal.Width))
train_df %>% mutate(vector = list(c(Sepal.Length,Sepal.Width, Petal.Length, Petal.Width)))
train_df
paste(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
train_df %>% mutate(vector = paste(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
train_df %>% mutate(vector = c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)))
train_df %>% mutate(vector = c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width))
train_df %>% mutate(vector = list(c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)))
train_df %>% mutate(vector = paste(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, sep = ","))
instance
my_euclidean <- function(a1, a2, a3, a4, a5, b = instance[1:4]){
d = 0
for(i in 1:length(a)){
d = d + (a[i]-b[i])^2
}
sqrt(d)
}
train_df %>% mutate(distance = pmap_dbl(list(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width), my_euclidean)
)
my_euclidean <- function(a1, a2, a3, a4, b = instance[1:4]){
a <- c(a1,a2,a3,a4)
d = 0
for(i in 1:length(a)){
d = d + (a[i]-b[i])^2
}
sqrt(d)
}
train_df %>% mutate(distance = pmap_dbl(list(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width), my_euclidean))
train_df %>% mutate(distance = pmap_dbl(list(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width), my_euclidean)) %>% arrange(desc(distance))
train_df %>% mutate(distance = pmap_dbl(list(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width), my_euclidean)) %>% arrange(desc(distance))
train_df %>% mutate(distance = pmap_dbl(list(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width), my_euclidean)) %>% arrange(distance)
instance
train_df %>%
mutate(distance = pmap_dbl(list(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width), my_euclidean)) %>%
arrange(distance)
trained_df <- train_df %>%
mutate(distance = pmap_dbl(list(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width), my_euclidean)) %>%
arrange(distance)
tmp %>% pull(Species) %>% table
trained_df %>% top_n(5) %>% pull(Species) %>% table
str(trained_df %>% top_n(5) %>% pull(Species) %>% table)
str(trained_df %>% top_n(5, by = "distance") %>% pull(Species) %>% table)
str(trained_df %>% top_n(5, distance) %>% pull(Species) %>% table)
(trained_df %>% top_n(5, distance) %>% pull(Species) %>% table[[1]])
(trained_df %>% top_n(5, distance) %>% pull(Species) %>% table[1])
(trained_df %>% top_n(5, distance) %>% pull(Species) %>% table)
tmp <- trained_df %>% top_n(5, distance) %>% pull(Species) %>% table
tmp <- trained_df %>% top_n(5, distance) %>% pull(Species) %>% table %>% as.df
tmp <- trained_df %>% top_n(5, distance) %>% pull(Species) %>% table %>% as.data.frame
View(tmp)
trained_df %>% top_n(5, distance) %>% pull(Species) %>% count(Species)
trained_df %>% top_n(5, distance) %>% pull(Species)
trained_df %>% top_n(5, distance) %>% select(Species) %>% count(Species)
trained_df %>% top_n(5, distance) %>% select(Species)
trained_df %>% top_n(5, distance) %>% select(Species) %>% count(Species)
trained_df %>% top_n(5, distance) %>% group_by(Species) %>% count(Species)
?count
tmp <- trained_df %>% top_n(5, distance) %>% group_by(Species) %>% count(Species)
tmp <- trained_df %>% top_n(5, distance) %>% count(Species)
tmp <- trained_df %>% top_n(5, distance) %>% select(Species) %>% mutate(frequency= count(Species))
trained_df %>% top_n(5, distance) %>% select(Species) %>% mutate(frequency= count(Species))
tmp <- trained_df %>% top_n(5, distance) %>% select(Species) %>% group_by(Species)%>% mutate(frequency= n())
trained_df %>% top_n(5, distance) %>% select(Species) %>% group_by(Species)%>% mutate(frequency= n())
trained_df %>% top_n(5, distance) %>% group_by(Species) %>% mutate(count= n())
tmp <- trained_df %>% top_n(5, distance) %>% group_by(Species) %>% mutate(count= n(Species))
tmp <- trained_df %>% top_n(5, distance) %>% count(Species)
tmp <- trained_df %>% top_n(5, distance) %>% count(`Species`)
trained_df %>% top_n(5, distance)
tmp <- trained_df %>% top_n(5, distance) %>% count(Species)
#Data Wrangling
library(tidyverse)
library(tidytext)     # Processing text such e.g. unnest_tokens
library(quanteda)     # DTM implementation called dfm needed for STM model
#Topic Models
library(topicmodels)  # LDA model
library(stm)          # STM model
#Visualisation
library(ggwordcloud)  # Word Clouds
library(ggthemes)     # extra geoms, themes and scales
library(lemon)        # Legends
#Others
library(rlang)        # Quote
tmp <- trained_df %>% top_n(5, distance) %>% count(Species)
tmp <- trained_df %>% top_n(5, distance) %>% ungroup() %>% count(Species)
trained_df %>% top_n(5, distance) %>% ungroup()
trained_df %>% top_n(5, distance) %>% pull(Species)
tmp <- trained_df %>% top_n(5, distance) %>% pull(Species) %>% n(Species)
tmp <- trained_df %>% top_n(5, distance) %>% pull(Species) %>% mutate(n = n(Species))
tmp <- trained_df %>% top_n(5, distance) %>% select(Species) %>% mutate(n = n(Species))
tmp <- trained_df %>% top_n(5, distance) %>% select(Species) %>% mutate(n = n())
tmp <- trained_df %>% top_n(5, distance) %>% select(Species) %>% tally()
<- trained_df %>% top_n(5, distance) %>% select(Species) %>% tally()
rm(tmp)
trained_df %>% top_n(5, distance) %>% select(Species) %>% tally()
trained_df %>% top_n(5, distance) %>% select(Species) %>%group_by(Species) %>% tally()
trained_df %>% top_n(5, distance) %>% group_by(Species) %>% tally()
trained_df %>% top_n(15, distance) %>% group_by(Species) %>% tally()
trained_df %>% top_n(20, distance) %>% group_by(Species) %>% tally()
trained_df %>% top_n(50, distance) %>% group_by(Species) %>% tally()
trained_df %>% top_n(50, distance) %>% group_by(Species) %>% tally() %>% .[1] %>% pull
trained_df %>% top_n(50, distance) %>% group_by(Species) %>% tally() %>% .[1]
trained_df %>% top_n(50, distance) %>% group_by(Species) %>% tally() %>% .[1,1]
trained_df %>% top_n(50, distance) %>% group_by(Species) %>% tally() %>% pull() %>% .[1]
trained_df %>% top_n(50, distance) %>% group_by(Species) %>% tally() %>% pull()
trained_df %>% top_n(50, distance) %>% group_by(Species) %>% tally() %>% pull(Species)
trained_df %>% top_n(50, distance) %>% group_by(Species) %>% tally() %>% pull(Species) %>% .[1]
clssify <- function(df, k){
tmp <- df %>% top_n(k) %>% group_by(Species) %>% tally() %>% pull(Species) %>% .[1]
tmp
}
rm(clssify)
classify <- function(df, k){
tmp <- df %>% top_n(k) %>% group_by(Species) %>% tally() %>% pull(Species) %>% .[1]
tmp
}
classify(trained_df)
classify(trained_df, 5)
test_df
str(iris)
irs_randomised <- iris[sample(nrow(iris)),]
train_df <- irs_randomised[1:as.integer(0.7*nrow(irs_randomised)),]
test_df  <-irs_randomised[as.integer(0.7*nrow(irs_randomised)+1),]
test_df
irs_randomised
(0.7*nrow(irs_randomised))
1:as.integer(0.7*nrow(irs_randomised))
train_df <- irs_randomised[1:as.integer(0.7*nrow(irs_randomised)),]
as.integer(0.7*nrow(irs_randomised)+1)
as.integer(0.7*nrow(irs_randomised)+1)
as.integer(0.7*nrow(irs_randomised)+1)
as.integer(0.7*nrow(irs_randomised)+1)
test_df  <-irs_randomised[as.integer(0.7*nrow(irs_randomised)+1):nrow(irs_randomised),]
test_df
instance <- test_df[1,]
instance
my_euclidean <- function(a1, a2, a3, a4, b = instance[1:4]){
a <- c(a1,a2,a3,a4)
d = 0
for(i in 1:length(a)){
d = d + (a[i]-b[i])^2
}
sqrt(d)
}
trained_df <- train_df %>%
mutate(distance = pmap_dbl(list(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width), my_euclidean)) %>%
arrange(distance)
classify <- function(df, k){
tmp <- df %>% top_n(k) %>% group_by(Species) %>% tally() %>% pull(Species) %>% .[1]
tmp
}
classify(trained_df, 5)
instance[1:4]
getwd
getwd()
